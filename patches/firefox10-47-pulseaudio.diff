diff --git a/media/libsydneyaudio/src/sydney_audio_sunaudio.c b/media/libsydneyaudio/src/sydney_audio_sunaudio.c
--- a/media/libsydneyaudio/src/sydney_audio_sunaudio.c
+++ b/media/libsydneyaudio/src/sydney_audio_sunaudio.c
@@ -44,6 +44,7 @@
 #include <sys/audio.h>
 #include <sys/stat.h>
 #include <sys/mixer.h>
+#include <pulse/pulseaudio.h>
 #include "sydney_audio.h"
 
 /* Sun Audio implementation based heavily on sydney_audio_mac.c */
@@ -129,6 +130,13 @@
   int               n_bufs;
 
   size_t            buffer_size;
+
+  bool                  using_pa;
+  pa_context*           pa_context;
+  pa_stream*            pa_stream;
+  pa_sample_spec        pa_sample_spec;
+  pa_threaded_mainloop* pa_m;
+  char                  pa_client_name[255];
 };
 
 /* Use a default buffer size with enough room for one second of audio,
@@ -143,11 +151,61 @@
 #endif
 
 static void *audio_callback(void *s);
+static void *pa_audio_callback(void *s);
 static sa_buf *new_buffer(size_t bufsz);
 static int shutdown_device(sa_stream_t *s);
 
 /*
  * -----------------------------------------------------------------------------
+ * Pulseaudio callback functions
+ * -----------------------------------------------------------------------------
+ */
+ 
+static void pa_context_state_callback(pa_context *c, void *userdata) {
+  sa_stream_t* s = (sa_stream_t*)userdata;
+  switch (pa_context_get_state(c)) {
+    case PA_CONTEXT_READY:
+    case PA_CONTEXT_TERMINATED:
+    case PA_CONTEXT_FAILED:
+      pa_threaded_mainloop_signal(s->pa_m, 0); 
+      break;
+    case PA_CONTEXT_UNCONNECTED:
+    case PA_CONTEXT_CONNECTING:
+    case PA_CONTEXT_AUTHORIZING:
+    case PA_CONTEXT_SETTING_NAME:
+      break;
+  }
+}
+
+static void pa_stream_state_callback(pa_stream *stream, void *userdata) {
+  sa_stream_t* s = (sa_stream_t*)userdata;
+  switch (pa_stream_get_state(stream)) {
+
+      case PA_STREAM_READY:
+      case PA_STREAM_FAILED:
+      case PA_STREAM_TERMINATED:
+        pa_threaded_mainloop_signal(s->pa_m, 0);
+        break;
+      case PA_STREAM_UNCONNECTED:
+      case PA_STREAM_CREATING:
+        break;
+  }
+}
+
+static void pa_stream_write_callback(pa_stream *stream, size_t length, void *userdata)
+{
+  sa_stream_t* s = (sa_stream_t*)userdata;
+  pa_threaded_mainloop_signal(s->pa_m, 0);
+}
+
+static void pa_stream_latency_update_callback(pa_stream *stream, void *userdata)
+{
+  sa_stream_t* s = (sa_stream_t*)userdata;
+  pa_threaded_mainloop_signal(s->pa_m, 0);
+}
+
+/*
+ * -----------------------------------------------------------------------------
  * Startup and shutdown functions
  * -----------------------------------------------------------------------------
  */
@@ -212,6 +270,16 @@
     return SA_ERROR_SYSTEM;
   }
 
+  s->pa_stream = NULL;
+  s->pa_m      = NULL;
+#ifdef __sparc
+  s->pa_sample_spec.format   = PA_SAMPLE_S16BE;
+#else
+  s->pa_sample_spec.format   = PA_SAMPLE_S16LE;
+#endif
+  s->pa_sample_spec.channels = n_channels;
+  s->pa_sample_spec.rate     = rate;
+
   *_s = s;
   return SA_SUCCESS;
 }
@@ -224,6 +292,9 @@
   if (s->output_fd != -1) {
     return SA_ERROR_INVALID;
   }
+  if (s->pa_stream != NULL) {
+    return SA_ERROR_INVALID;
+  }
 
   /*
    * Open the default audio output unit.
@@ -231,6 +302,67 @@
 
   /* If UTAUDIODEV is set, use it with Sun Audio interface */
   char * sa_device_name = getenv("UTAUDIODEV");
+
+  s->using_pa = true;
+  /* Set up a new main loop */
+  s->pa_m = pa_threaded_mainloop_new();
+  pa_threaded_mainloop_start(s->pa_m);
+
+  pa_threaded_mainloop_lock(s->pa_m);
+
+  /* Create a new connection context */
+  if (!(s->pa_context = pa_context_new(pa_threaded_mainloop_get_api(s->pa_m), "OggPlay"))) {
+    fprintf(stderr, "pa_context_new() failed.\n");
+    pa_threaded_mainloop_unlock(s->pa_m);
+    return SA_ERROR_NO_DEVICE;
+  }
+  pa_context_set_state_callback(s->pa_context, pa_context_state_callback, s);
+
+  char *server = NULL;
+  pa_context_connect(s->pa_context, server, 0, NULL);
+
+  /* Wait until the context is ready */
+  pa_threaded_mainloop_wait(s->pa_m);
+  if (pa_context_get_state(s->pa_context) != PA_CONTEXT_READY) {
+    fprintf(stderr, "creating Pulseaudio Context failed\n");
+    s->using_pa = false;
+  }
+  pa_threaded_mainloop_unlock(s->pa_m);
+
+  if (s->using_pa) {
+    pa_threaded_mainloop_lock(s->pa_m);
+    if (!(s->pa_stream = pa_stream_new(s->pa_context, s->pa_client_name, &s->pa_sample_spec, NULL))) {
+      fprintf(stderr, "pa_stream_new() failed: %s\n", pa_strerror(pa_context_errno(s->pa_context)));
+      pa_threaded_mainloop_unlock(s->pa_m);
+      return SA_ERROR_NO_DEVICE;
+    }
+
+    pa_stream_set_state_callback(s->pa_stream, pa_stream_state_callback, s);
+    pa_stream_set_write_callback(s->pa_stream, pa_stream_write_callback, s);
+    pa_stream_set_latency_update_callback(s->pa_stream, pa_stream_latency_update_callback, s);
+
+    if (pa_stream_connect_playback(s->pa_stream, NULL, NULL, 0, NULL, NULL) < 0) {
+      fprintf(stderr, "pa_stream_connect_playback() failed: %s\n", pa_strerror(pa_context_errno(s->pa_context)));
+      pa_threaded_mainloop_unlock(s->pa_m);
+      return SA_ERROR_NO_DEVICE;
+    }
+
+    /* Wait until the stream is ready */
+    pa_threaded_mainloop_wait(s->pa_m);
+
+    if (pa_stream_get_state(s->pa_stream) != PA_STREAM_READY) {
+      fprintf(stderr, "Failed to connect stream: %s", pa_strerror(pa_context_errno(s->pa_context)));
+      pa_threaded_mainloop_unlock(s->pa_m);
+      return SA_ERROR_NO_DEVICE;
+    }
+    pa_threaded_mainloop_unlock(s->pa_m);
+
+    if (!s->pa_stream)
+      return SA_ERROR_NO_DEVICE;
+
+    return SA_SUCCESS;
+  }
+
   char * dsp_device_name = NULL;
   if (!sa_device_name) {
     dsp_device_name = getenv("AUDIODSP");
@@ -328,7 +460,6 @@
 
   int result = SA_SUCCESS;
 
-
   /*
    * Shutdown the audio output device.
    */
@@ -358,7 +489,13 @@
 
 int
 sa_stream_write(sa_stream_t *s, const void *data, size_t nbytes) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa && (s->pa_stream == NULL)) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (!s->using_pa && (s->output_fd == -1)) {
     return SA_ERROR_NO_INIT;
   }
   if (nbytes == 0) {
@@ -441,7 +578,7 @@
    */
   if (!s->playing) {
     s->playing = true;
-    if (pthread_create(&s->thread_id, NULL, audio_callback, s) != 0) {
+    if (pthread_create(&s->thread_id, NULL, s->using_pa ? pa_audio_callback : audio_callback, s) != 0) {
       result = SA_ERROR_SYSTEM;
     }
   }
@@ -451,6 +588,101 @@
   return result;
 }
 
+static void *pa_audio_callback(void* data)
+{
+  sa_stream_t* s = (sa_stream_t*)data;
+  unsigned int bytes_per_frame = s->pa_sample_spec.channels * pa_sample_size(&s->pa_sample_spec);
+  size_t buffer_size = s->pa_sample_spec.rate * bytes_per_frame;
+  char* buffer = malloc(buffer_size);
+
+  while(1) {
+    char* dst = buffer;
+    size_t bytes_to_copy, bytes;
+
+    pa_threaded_mainloop_lock(s->pa_m);
+    while(1) {
+      if (s == NULL || s->pa_stream == NULL) {
+        if (s != NULL && s->pa_m != NULL)
+          pa_threaded_mainloop_unlock(s->pa_m);
+        goto free_buffer;
+      }
+      if ((bytes_to_copy = pa_stream_writable_size(s->pa_stream)) == (size_t) -1) {
+        fprintf(stderr, "pa_stream_writable_size() failed: %s", pa_strerror(pa_context_errno(s->pa_context)));
+        pa_threaded_mainloop_unlock(s->pa_m);
+        goto free_buffer;
+      }
+      if(bytes_to_copy > 0)
+        break;
+      pa_threaded_mainloop_wait(s->pa_m);
+    }
+    pa_threaded_mainloop_unlock(s->pa_m);
+    if (bytes_to_copy > buffer_size)
+      bytes_to_copy = buffer_size;
+    bytes = bytes_to_copy;
+
+    pthread_mutex_lock(&s->mutex);
+    if (!s->playing) {
+      pthread_mutex_unlock(&s->mutex);
+      break;
+    }
+    /*
+     * Consume data from the start of the buffer list.
+     */
+    while (1) {
+      unsigned int avail = s->bl_head->end - s->bl_head->start;
+      assert(s->bl_head->start <= s->bl_head->end);
+
+      if (avail >= bytes_to_copy) {
+        /*
+         * We have all we need in the head buffer, so just grab it and go.
+         */
+        memcpy(dst, s->bl_head->data + s->bl_head->start, bytes_to_copy);
+        s->bl_head->start += bytes_to_copy;
+        break;
+
+      } else {
+        sa_buf* next = 0;
+        /*
+         * Copy what we can from the head and move on to the next buffer.
+         */
+        memcpy(dst, s->bl_head->data + s->bl_head->start, avail);
+        s->bl_head->start += avail;
+        dst += avail;
+        bytes_to_copy -= avail;
+        /*
+         * We want to free the now-empty buffer, but not if it's also the
+         * current tail. If it is the tail, we don't have enough data to fill
+         * the destination buffer, so we write less and give up.
+         */
+        next = s->bl_head->next;
+        if (next == NULL) {
+          bytes = bytes-bytes_to_copy;
+          break;
+        }
+        free(s->bl_head);
+        s->bl_head = next;
+        s->n_bufs--;
+      } /* if (avail >= bytes_to_copy), else */
+    } /* while (1) */
+
+    if(bytes > 0) {
+      pa_threaded_mainloop_lock(s->pa_m);
+      if (pa_stream_write(s->pa_stream, buffer, bytes, NULL, 0, PA_SEEK_RELATIVE) < 0) {
+        fprintf(stderr, "pa_stream_write() failed: %s", pa_strerror(pa_context_errno(s->pa_context)));
+        pa_threaded_mainloop_unlock(s->pa_m);
+        return NULL;
+      }
+      pa_stream_update_timing_info(s->pa_stream, NULL, NULL);
+      s->bytes_played += bytes;
+      pa_threaded_mainloop_unlock(s->pa_m);
+    }
+    pthread_mutex_unlock(&s->mutex);
+  }
+free_buffer:
+  free(buffer);
+  return NULL;
+}
+
 static void *
 audio_callback(void *data) {
   sa_stream_t *s = data;
@@ -502,7 +734,13 @@
 
 int
 sa_stream_get_write_size(sa_stream_t *s, size_t *size) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa && (s->pa_stream == NULL)) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (!s->using_pa && (s->output_fd == -1)) {
     return SA_ERROR_NO_INIT;
   }
 
@@ -528,13 +766,32 @@
 
 int
 sa_stream_get_position(sa_stream_t *s, sa_position_t position, int64_t *pos) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa && (s->pa_stream == NULL)) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (!s->using_pa && (s->output_fd == -1)) {
     return SA_ERROR_NO_INIT;
   }
   if (position != SA_POSITION_WRITE_SOFTWARE) {
     return SA_ERROR_NOT_SUPPORTED;
   }
 
+  if (s->using_pa) {
+    pa_usec_t usec;
+    pa_threaded_mainloop_lock(s->pa_m);
+    if(pa_stream_get_time(s->pa_stream,  &usec) != PA_ERR_NODATA) {
+      *pos = pa_usec_to_bytes(usec, &s->pa_sample_spec);
+    }
+    else {
+      *pos  = s->bytes_played;
+    }
+    pa_threaded_mainloop_unlock(s->pa_m);
+    return SA_SUCCESS;
+  }
+
   pthread_mutex_lock(&s->mutex);
   *pos = s->bytes_played;
   pthread_mutex_unlock(&s->mutex);
@@ -543,7 +800,13 @@
 
 int
 sa_stream_drain(sa_stream_t *s) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa) {
+    return SA_ERROR_NOT_SUPPORTED;
+  }
+  if (s->output_fd == -1) {
     return SA_ERROR_NO_INIT;
   }
 
@@ -568,9 +831,19 @@
 
 int
 sa_stream_pause(sa_stream_t *s) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa && (s->pa_stream == NULL)) {
     return SA_ERROR_NO_INIT;
   }
+  if (!s->using_pa && (s->output_fd == -1)) {
+    return SA_ERROR_NO_INIT;
+  }
+
+  if (s->using_pa) {
+    return SA_SUCCESS;
+  }
 
   pthread_mutex_lock(&s->mutex);
   int result = shutdown_device(s);
@@ -588,6 +861,19 @@
   if (s == NULL) {
     return SA_ERROR_NO_INIT;
   }
+  if (s->using_pa && (s->pa_stream == NULL)) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (!s->using_pa && (s->output_fd == -1)) {
+    return SA_ERROR_NO_INIT;
+  }
+
+  if (s->using_pa) {
+    pa_threaded_mainloop_lock(s->pa_m);
+    s->bytes_played = 0;
+    pa_threaded_mainloop_unlock(s->pa_m);
+    return SA_SUCCESS;
+  }
 
   pthread_mutex_lock(&s->mutex);
   int result = sa_stream_open(s);
@@ -610,6 +896,21 @@
 
 static int
 shutdown_device(sa_stream_t *s) {
+  if (s->using_pa)
+  {
+    pa_threaded_mainloop_lock(s->pa_m);
+    pa_stream_disconnect(s->pa_stream);
+    s->pa_stream = NULL;
+    pa_context_disconnect(s->pa_context);
+    pa_context_unref(s->pa_context);
+    s->pa_context = NULL;
+    pa_threaded_mainloop_unlock(s->pa_m);
+
+    pa_threaded_mainloop_stop(s->pa_m);
+    pa_threaded_mainloop_free(s->pa_m);
+    return SA_SUCCESS;
+  }
+
   if (s->output_fd != -1)
   {
     /* Flush buffer. */
@@ -635,10 +936,22 @@
 
 int
 sa_stream_set_volume_abs(sa_stream_t *s, float vol) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa && (s->pa_stream == NULL)) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (!s->using_pa && (s->output_fd == -1)) {
     return SA_ERROR_NO_INIT;
   }
 
+  if (s->using_pa) {
+    pa_cvolume cv;
+    pa_cvolume_set(&cv, s->pa_sample_spec.channels, pa_sw_volume_from_dB(vol));
+    return SA_SUCCESS;
+  }
+
   if (s->using_oss) {
     int mvol = ((int)(100 * vol)) | ((int)(100 * vol) << 8);
     if (ioctl(s->output_fd, SNDCTL_DSP_SETPLAYVOL, &mvol) < 0) {
@@ -671,7 +984,13 @@
 
 int
 sa_stream_get_volume_abs(sa_stream_t *s, float *vol) {
-  if (s == NULL || s->output_fd == -1) {
+  if (s == NULL) {
+    return SA_ERROR_NO_INIT;
+  }
+  if (s->using_pa) {
+    return SA_SUCCESS;
+  }
+  if (s->output_fd == -1) {
     return SA_ERROR_NO_INIT;
   }
 
diff --git a/toolkit/library/Makefile.in b/toolkit/library/Makefile.in
--- a/toolkit/library/Makefile.in
+++ b/toolkit/library/Makefile.in
@@ -209,7 +209,7 @@
 endif
 
 ifeq ($(OS_ARCH),SunOS)
-EXTRA_DSO_LDOPTS += -lvorbis -ltheora -logg
+EXTRA_DSO_LDOPTS += -lvorbis -ltheora -logg -lpulse
 endif
 
 ifeq ($(OS_ARCH),SunOS)
