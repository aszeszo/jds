diff --git a/js/src/assembler/assembler/MacroAssemblerSparc.h b/js/src/assembler/assembler/MacroAssemblerSparc.h
--- a/js/src/assembler/assembler/MacroAssemblerSparc.h
+++ b/js/src/assembler/assembler/MacroAssemblerSparc.h
@@ -42,7 +42,7 @@
 #ifndef MacroAssemblerSparc_h
 #define MacroAssemblerSparc_h
 
-#include <wtf/Platform.h>
+#include <assembler/wtf/Platform.h>
 
 #if ENABLE_ASSEMBLER && WTF_CPU_SPARC
 
diff --git a/js/src/assembler/assembler/SparcAssembler.h b/js/src/assembler/assembler/SparcAssembler.h
--- a/js/src/assembler/assembler/SparcAssembler.h
+++ b/js/src/assembler/assembler/SparcAssembler.h
@@ -42,7 +42,7 @@
 #ifndef SparcAssembler_h
 #define SparcAssembler_h
 
-#include <wtf/Platform.h>
+#include <assembler/wtf/Platform.h>
 
 // Some debug code uses s(n)printf for instruction logging.
 #include <stdio.h>
@@ -50,7 +50,7 @@
 #if ENABLE_ASSEMBLER && WTF_CPU_SPARC
 
 #include "AssemblerBufferWithConstantPool.h"
-#include <wtf/Assertions.h>
+#include <assembler/wtf/Assertions.h>
 
 #include "methodjit/Logging.h"
 #define IPFX  "        %s"
diff --git a/js/src/jstypedarray.cpp b/js/src/jstypedarray.cpp
--- a/js/src/jstypedarray.cpp
+++ b/js/src/jstypedarray.cpp
@@ -812,7 +812,7 @@
 /* static */ int
 TypedArray::lengthOffset()
 {
-    return JSObject::getFixedSlotOffset(FIELD_LENGTH) + offsetof(jsval_layout, s.payload);
+    return JSObject::getFixedSlotOffset(FIELD_LENGTH);
 }
 
 /* static */ int
diff --git a/js/src/methodjit/FastOps.cpp b/js/src/methodjit/FastOps.cpp
--- a/js/src/methodjit/FastOps.cpp
+++ b/js/src/methodjit/FastOps.cpp
@@ -1387,7 +1387,8 @@
         objReg = frame.copyDataIntoReg(obj);
 
         // Bounds check.
-        Jump lengthGuard = masm.guardArrayExtent(TypedArray::lengthOffset(),
+        int lengthOffset = TypedArray::lengthOffset() + offsetof(jsval_layout, s.payload);
+        Jump lengthGuard = masm.guardArrayExtent(lengthOffset,
                                                  objReg, key, Assembler::BelowOrEqual);
         stubcc.linkExit(lengthGuard, Uses(3));
 
@@ -1913,7 +1914,8 @@
         objReg = frame.copyDataIntoReg(obj);
 
         // Bounds check.
-        Jump lengthGuard = masm.guardArrayExtent(TypedArray::lengthOffset(),
+        int lengthOffset = TypedArray::lengthOffset() + offsetof(jsval_layout, s.payload);
+        Jump lengthGuard = masm.guardArrayExtent(lengthOffset,
                                                  objReg, key, Assembler::BelowOrEqual);
         stubcc.linkExit(lengthGuard, Uses(2));
 
diff --git a/js/src/methodjit/LoopState.cpp b/js/src/methodjit/LoopState.cpp
--- a/js/src/methodjit/LoopState.cpp
+++ b/js/src/methodjit/LoopState.cpp
@@ -1327,7 +1327,7 @@
             if (entry.kind == InvariantEntry::DENSE_ARRAY_BOUNDS_CHECK)
                 masm.load32(Address(T0, offsetof(JSObject, initializedLength)), T0);
             else
-                masm.load32(Address(T0, TypedArray::lengthOffset()), T0);
+                masm.loadPayload(Address(T0, TypedArray::lengthOffset()), T0);
 
             int32 constant = entry.u.check.constant;
 
@@ -1418,7 +1418,7 @@
             Address address = frame.addressOf(frame.getTemporary(entry.u.array.temporary));
 
             if (entry.kind == InvariantEntry::TYPED_ARRAY_LENGTH) {
-                masm.load32(Address(T0, TypedArray::lengthOffset()), T0);
+                masm.loadPayload(Address(T0, TypedArray::lengthOffset()), T0);
                 masm.storeValueFromComponents(ImmType(JSVAL_TYPE_INT32), T0, address);
             } else {
                 masm.loadPtr(Address(T0, js::TypedArray::dataOffset()), T0);
diff --git a/js/src/methodjit/PolyIC.cpp b/js/src/methodjit/PolyIC.cpp
--- a/js/src/methodjit/PolyIC.cpp
+++ b/js/src/methodjit/PolyIC.cpp
@@ -2777,7 +2777,7 @@
 
     // Bounds check.
     Jump outOfBounds;
-    Address typedArrayLength(objReg, TypedArray::lengthOffset());
+    Address typedArrayLength = masm.payloadOf(Address(objReg, TypedArray::lengthOffset()));
     if (idRemat.isConstant()) {
         JS_ASSERT(idRemat.value().toInt32() == v.toInt32());
         outOfBounds = masm.branch32(Assembler::BelowOrEqual, typedArrayLength, Imm32(v.toInt32()));
@@ -3125,7 +3125,7 @@
 
     // Bounds check.
     Jump outOfBounds;
-    Address typedArrayLength(objReg, TypedArray::lengthOffset());
+    Address typedArrayLength = masm.payloadOf(Address(objReg, TypedArray::lengthOffset()));
     if (hasConstantKey)
         outOfBounds = masm.branch32(Assembler::BelowOrEqual, typedArrayLength, Imm32(keyValue));
     else
diff --git a/js/src/tracejit/Writer.h b/js/src/tracejit/Writer.h
--- a/js/src/tracejit/Writer.h
+++ b/js/src/tracejit/Writer.h
@@ -546,7 +546,7 @@
     }
 
     nj::LIns *ldiConstTypedArrayLength(nj::LIns *obj) const {
-        return name(lir->insLoad(nj::LIR_ldi, obj, TypedArray::lengthOffset(), ACCSET_TARRAY,
+        return name(lir->insLoad(nj::LIR_ldi, obj, TypedArray::lengthOffset() + sPayloadOffset, ACCSET_TARRAY,
                                  nj::LOAD_CONST),
                     "typedArrayLength");
     }
