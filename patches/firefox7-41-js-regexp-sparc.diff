diff -r 550b6bcf09b3 js/src/yarr/YarrJIT.cpp
--- a/js/src/yarr/YarrJIT.cpp	Sat Oct 01 21:40:36 2011 +0200
+++ b/js/src/yarr/YarrJIT.cpp	Sat Oct 08 15:20:11 2011 +0800
@@ -1205,8 +1205,10 @@
                 // If we get here, the prior alternative matched - return success.
                 
                 // Adjust the stack pointer to remove the pattern's frame.
+#if !WTF_CPU_SPARC
                 if (m_pattern.m_body->m_callFrameSize)
                     addPtr(Imm32(m_pattern.m_body->m_callFrameSize * sizeof(void*)), stackPointerRegister);
+#endif
 
                 // Load appropriate values into the return register and the first output
                 // slot, and return. In the case of pattern with a fixed size, we will
@@ -1513,8 +1515,10 @@
             }
 
             case OpMatchFailed:
+#if !WTF_CPU_SPARC
                 if (m_pattern.m_body->m_callFrameSize)
                     addPtr(Imm32(m_pattern.m_body->m_callFrameSize * sizeof(void*)), stackPointerRegister);
+#endif
                 move(TrustedImm32(-1), returnRegister);
                 generateReturn();
                 break;
@@ -1753,8 +1757,10 @@
                 // run any matches, and need to return a failure state from JIT code.
                 matchFailed.link(this);
 
+#if !WTF_CPU_SPARC
                 if (m_pattern.m_body->m_callFrameSize)
                     addPtr(Imm32(m_pattern.m_body->m_callFrameSize * sizeof(void*)), stackPointerRegister);
+#endif
                 move(TrustedImm32(-1), returnRegister);
                 generateReturn();
                 break;
@@ -2326,8 +2332,6 @@
         push(SH4Registers::r13);
 #elif WTF_CPU_SPARC
         save(Imm32(-m_pattern.m_body->m_callFrameSize * sizeof(void*)));
-        // set m_callFrameSize to 0 avoid and stack movement later.
-        m_pattern.m_body->m_callFrameSize = 0;
 #elif WTF_CPU_MIPS
         // Do nothing.
 #endif
@@ -2377,8 +2381,10 @@
         if (!m_pattern.m_body->m_hasFixedSize)
             store32(index, Address(output));
 
+#if !WTF_CPU_SPARC
         if (m_pattern.m_body->m_callFrameSize)
             subPtr(Imm32(m_pattern.m_body->m_callFrameSize * sizeof(void*)), stackPointerRegister);
+#endif
 
         // Compile the pattern to the internal 'YarrOp' representation.
         opCompileBody(m_pattern.m_body);
